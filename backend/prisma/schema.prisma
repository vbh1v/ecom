// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name  String
  email String  @unique
  password String
  role Role @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  cartItems   CartItem[]
  addresses Address[]
  orders Order[]
}

model Address {
  id    Int     @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pincode String
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  imageURL String
  price Int
  slug String @unique
  categoryId Int 
  name String
  description String
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems   CartItem[]
  orders OrderProduct[]
}

model CartItem {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product  Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  products Product[]
}

model Order{
  id Int @id @default(autoincrement())
  userId Int
  netAmount Decimal
  address String
  user User @relation(fields: [userId], references: [id])
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products OrderProduct[]
  events OrderEvent[]

}

model OrderProduct {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderEvent {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}



